name: GHUD Pilot seat v1.4.9

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    databank:
        class: DatabankUnit
        select: manual
    screen:
        class: ScreenUnit
        select: manual
    transponder:
        class: TransponderUnit

handlers:
    unit:
        onStart:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                if unit.isRemoteControlled() == 1 then
                    player.freeze(1)
                end

                gearExtended = (unit.isAnyLandingGearDeployed() == 1)
                if gearExtended then
                    unit.deployLandingGears()
                else
                    unit.retractLandingGears()
                end
{{unit.onStart.minified.lua}}
        onStop:
            lua: |
{{unit.onStop.lua}}
        onTimer:
            args: ['hud']
            lua: |
{{unit.onTimer.hud.minified.lua}}
        onTimer:
            args: ['tr']
            lua: |
{{unit.onTimer.tr.lua}}
        onTimer:
            args: ['marker']
            lua: |
{{unit.onTimer.marker.lua}}
        onTimer:
            args: ['vectorhud']
            lua: |
{{unit.onTimer.vectorhud.lua}}
        onTimer:
            args: ['brake']
            lua: |
{{unit.onTimer.brake.minified.lua}}
        onTimer:
            args: ['prealarm']
            lua: |
{{unit.onTimer.prealarm.lua}}
        onTimer:
            args: ['AM']
            lua: |
{{unit.onTimer.AM.lua}}
        onTimer:
            args: ['EM']
            lua: |
{{unit.onTimer.EM.lua}}
        onTimer:
            args: ['TH']
            lua: |
{{unit.onTimer.TH.lua}}
        onTimer:
            args: ['KI']
            lua: |
{{unit.onTimer.KI.lua}}
        onTimer:
            args: ['warp']
            lua: |
{{unit.onTimer.warp.lua}}
        onTimer:
            args: ['cleaner']
            lua: |
{{unit.onTimer.cleaner.lua}}
    radar_1:
        onEnter(id):
            lua: |
{{radar_1.onEnter.lua}}
        onLeave(id):
            lua: |
{{radar_1.onLeave.lua}}
    radar_2:
        onEnter(id):
            lua: |
{{radar_2.onEnter.lua}}
        onLeave(id):
            lua: |
{{radar_1.onLeave.lua}}
    weapon_1:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_1,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_2:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_2,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_3:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_3,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_4:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_4,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_5:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_5,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_6:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_6,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    weapon_7:
        onHit(targetId,damage):
            lua: |
                hitFnc(weapon_7,math.floor(damage),targetId)
        onMissed(targetId):
            lua: |
{{weapon.onMissed.lua}}
        onElementDestroyed(targetId,elementId):
            lua: |
{{weapon.onDestroyedElement.lua}}
    construct:
        onPvPTimer(active):
            lua: |
{{construct.onPvPTimer(active).lua}}
    core:
        onStressChanged(stress):
            lua: |
{{core.onStressChanged(stress).lua}}
    shield:
        onAbsorbed(hitpoints, rawHitpoints):
            lua: |
{{shield.onAbsorbed(hitpoints,rawHitpoints).minified.lua}}
        onDown():
            lua: |
{{shield.onDown.lua}}
        onVenting(active, restoredHitpoints):
            lua: |
{{shield.onVenting(active,restoredHitpoints).lua}}
        onRestored():
            lua: |
{{shield.onRestored.lua}}
        onToggled(active):
            lua: |
{{shield.onToggle(active).lua}}
    system:
        onFlush:
            lua: |

                local pitchSpeedFactor = 0.8 --export:
                local yawSpeedFactor =  1 --export:
                local rollSpeedFactor = 1.5 --export:

                local brakeSpeedFactor = 3 --export: 
                local brakeFlatFactor = 1 --export:

                local autoRoll = false --export: 
                local autoRollFactor = 2 --export:

                local turnAssist = true --export: 
                local turnAssistFactor = 2 --export:

                local torqueFactor = 2

                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                local worldVertical = vec3(core.getWorldVertical())
                local constructUp = vec3(construct.getWorldOrientationUp())
                local constructForward = vec3(construct.getWorldOrientationForward())
                local constructRight = vec3(construct.getWorldOrientationRight())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30); 
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) 
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 
                        local rollToYawFactor = turnAssistFactor * 0.025 

                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                local keepCollinearity = 1 
                local dontKeepCollinearity = 0
                local tolerancePercentToSkipOtherPriorities = 1

                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95) 
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                Nav:setBoosterCommand('rocket_engine')
        onUpdate:
            lua: |
                Nav:update()
{{system.onUpdate.lua}}
        onActionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    unit.deployLandingGears()
                else
                    unit.retractLandingGears()
                end
{{system.onActionStart.gear.lua}}
        onActionStop:
            args: [gear]
            lua: |
{{system.onActionStop.gear.lua}}
        onActionStart:
            args: [light]
            lua: |
                if unit.isAnyHeadlightSwitchedOn() == 1 then
                    unit.switchOffHeadlights()
                else
                    unit.switchOnHeadlights()
                end
        onActionStart:
            args: [forward]
            lua: |
                pitchInput = pitchInput - 1
        onActionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        onActionStart:
            args: [backward]
            lua: |
                pitchInput = pitchInput + 1
        onActionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        onActionStart:
            args: [left]
            lua: |
                rollInput = rollInput - 1
        onActionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        onActionStart:
            args: [right]
            lua: |
                rollInput = rollInput + 1
        onActionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        onActionStart:
            args: [straferight]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
{{system.onActionStart.straferight.lua}}
        onActionStop:
            args: [straferight]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
{{system.onActionStop.straferight.lua}}
        onActionStart:
            args: [strafeleft]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
{{system.onActionStart.strafeleft.lua}}
        onActionStop:
            args: [strafeleft]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
{{system.onActionStop.strafeleft.lua}}
        onActionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
{{system.onActionStart.up.lua}}
        onActionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
{{system.onActionStop.up.lua}}
        onActionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
{{system.onActionStart.down.lua}}
        onActionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
{{system.onActionStop.down.lua}}
        onActionStart:
            args: [groundaltitudeup]
            lua: |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
{{system.onActionStart.groundaltitudeup.lua}}
        onActionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        onActionStart:
            args: [groundaltitudedown]
            lua: |
                Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
{{system.onActionStart.groundaltitudedown.lua}}
        onActionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        onActionStart:
            args: [yawright]
            lua: |
                yawInput = yawInput - 1
        onActionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        onActionStart:
            args: [yawleft]
            lua: | 
                yawInput = yawInput + 1
        onActionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        onActionStart:
            args: [brake]
            lua: |
{{system.onActionStart.brake.lua}}
        onActionStop:
            args: [brake]
            lua: | 
                brakeInput = brakeInput - 1
{{system.onActionStop.brake.lua}}
        onActionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        onActionStart:
            args: [booster]
            lua: |
                Nav:toggleBoosters()
{{system.onActionStart.booster.lua}}
        onActionStart:
            args: [stopengines]
            lua: {{system.onActionStart.stopengines.lua}}
        onActionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        onActionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        onActionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        onActionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        onActionStart:
            args: [antigravity]
            lua: |
                if antigrav ~= nil then antigrav.toggle() end
{{system.onActionStart.antigravity.lua}}
        onActionStart:
            args: [option1]
            lua: |
{{system.onActionStart.option1.minified.lua}}
        onActionStart:
            args: [option2]
            lua: |
{{system.onActionStart.option2.minified.lua}}
        onActionStart:
            args: [option3]
            lua: |
{{system.onActionStart.option3.minified.lua}}
        onActionStart:
            args: [option4]
            lua: |
{{system.onActionStart.option4.minified.lua}}
        onActionLoop:
            args: [option5]
            lua: |
{{system.onActionLoop.option5.lua}}
        onActionStop:
            args: [option5]
            lua: |
{{system.onActionStop.option5.lua}}
        onActionStart:
            args: [option6]
            lua: |
{{system.onActionStart.option6.minified.lua}}
        onActionStart:
            args: [option7]
            lua: |
{{system.onActionStart.option7.lua}}
        onActionStart:
            args: [option8]
            lua: |
{{system.onActionStart.option8.lua}}
        onActionStart:
            args: [option9]
            lua: |
{{system.onActionStart.option9.lua}}
        onActionStart:
            args: [lalt]
            lua: |
{{system.onActionStart.lalt.lua}}
        onActionStop:
            args: [lalt]
            lua: |
{{system.onActionStop.lalt.lua}}
        onActionStart:
            args: [lshift]
            lua: |
{{system.onActionStart.lshift.lua}}
        onActionStop:
            args: [lshift]
            lua: |
{{system.onActionStop.lshift.lua}}
        onInputText(text):
            lua: |
{{system.onInputText.minified.lua}}