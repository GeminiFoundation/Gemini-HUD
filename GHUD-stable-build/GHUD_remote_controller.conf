name: GHUD Remote controller v1.4.9

slots:
    core:
        class: CoreUnit
    antigrav:
        class: AntiGravityGeneratorUnit
    warpdrive:
        class: WarpDriveUnit
    atmofueltank:
        class: AtmoFuelContainer
        select: manual
    spacefueltank:
        class: SpaceFuelContainer
        select: manual
    rocketfueltank:
        class: RocketFuelContainer
        select: manual
    shield:
        class: ShieldGeneratorUnit
    weapon:
        class: WeaponUnit
        select: manual
    radar:
        class: RadarPVPUnit
        select: manual
    transponder:
        class: TransponderUnit

handlers:
    unit:
        onStart:
            lua: |
                pitchInput = 0
                rollInput = 0
                yawInput = 0
                brakeInput = 0

                Nav = Navigator.new(system, core, unit)
                Nav.axisCommandManager:setupCustomTargetSpeedRanges(axisCommandId.longitudinal, {1000, 5000, 10000, 20000, 30000})
                Nav.axisCommandManager:setTargetGroundAltitude(4)

                -- freeze the player in he is remote controlling the construct
                if unit.isRemoteControlled() == 1 then
                    player.freeze(1)
                end

                -- landing gear
                -- make sure every gears are synchonized with the first
                gearExtended = (unit.isAnyLandingGearDeployed() == 1) -- make sure it's a lua boolean
                if gearExtended then
                    unit.deployLandingGears()
                else
                    unit.retractLandingGears()
                end
                -- GEMINI FOUNDATION
                
                --Remote controller
                HUD_version = '1.4.9'
                
                --LUA parameters
                GHUD_shield_auto_calibration = true --export: AUTO/MANUAL shield mode
                GHUD_shield_calibration_max = true --export: MAX or 50/50 shield mode
                GHUD_shield_panel_size = 95 --export:
                GHUD_shield_panel_Y = 87.5 --export:
                GHUD_active_resists_border_color = '#07e88e' --export:
                GHUD_shield_panel_opacity = 1 --export:
                GHUD_shield_background_color = '#142027' --export:
                GHUD_shield_background2_color = 'black' --export:
                GHUD_shield_empty_background_layer_color = 'rgba(0,0,0,0)' --export:
                GHUD_shield_stroke_color = 'rgb(0, 191, 255)' --export:
                GHUD_shield_text_color = 'rgb(255, 252, 252)' --export:
                GHUD_shield_text_stroke_color = 'rgb(0, 0, 0)' --export:
                GHUD_right_block_X = 65 --export:
                GHUD_left_block_X = 65 --export:
                GHUD_background_color = '#142027' --export:
                GHUD_Y = 48.5 --export:
                GHUD_shield_warning_message_Y = 20 --export: Shield low HP warning message
                GHUD_brake_Y = 1 -- export: Brake indicator
                collectgarbages = false --export: experimental
                
                --shield
                damageLine = ''
                ccsLineHit = ''
                damage = 0
                maxSHP = 210 --svg shield X right side coordinate
                shieldMaxHP = shield.getMaxShieldHitpoints()
                last_shield_hp = shield.getShieldHitpoints()
                HP = shield.getShieldHitpoints()/shieldMaxHP * 100
                svghp = maxSHP * (HP * 0.01)
                
                --CCS
                ccshit = 0
                maxCCS = 139.5
                coreMaxStress = core.getMaxCoreStress()
                last_core_stress = core.getCoreStress()
                CCS = last_core_stress/coreMaxStress * 100
                ccshp1 = maxCCS * (CCS * 0.01)
                ccshp = ccshp1
                
                --FUEL
                maxFUEL = maxCCS
                fuel_lvl = math.ceil(spacefueltank_1.getItemsVolume()/spacefueltank_1.getMaxVolume() * 100)
                FUEL_svg = maxFUEL * (fuel_lvl * 0.01)
                
                AM_last_stress = 0
                EM_last_stress = 0
                TH_last_stress = 0
                KI_last_stress = 0
                AM_svg = 0
                EM_svg = 0
                TH_svg = 0
                KI_svg = 0
                
                if warpdrive ~= nil then
                   avWarp = warpdrive.getRequiredWarpCells()
                   totalWarp = warpdrive.getAvailableWarpCells()
                else
                   avWarp = 0
                   totalWarp = 0
                end
                
                function resistance_SVG()
                   local res = shield.getResistances()
                   if res[1] > 0 then
                      AM_stroke_color = GHUD_active_resists_border_color
                      AMstrokeWidth = 2
                   else
                      AM_stroke_color = GHUD_shield_stroke_color
                      AMstrokeWidth = 1
                   end
                   if res[2] > 0 then
                      EM_stroke_color = GHUD_active_resists_border_color
                      EMstrokeWidth = 2
                   else
                      EM_stroke_color = GHUD_shield_stroke_color
                      EMstrokeWidth = 1
                   end
                   if res[3] > 0 then
                      KI_stroke_color = GHUD_active_resists_border_color
                      KIstrokeWidth = 2
                   else
                      KI_stroke_color = GHUD_shield_stroke_color
                      KIstrokeWidth = 1
                   end
                   if res[4] > 0 then
                      TH_stroke_color = GHUD_active_resists_border_color
                      THstrokeWidth = 2
                   else
                      TH_stroke_color = GHUD_shield_stroke_color
                      THstrokeWidth = 1
                   end
                end
                
                function actionRes(res)
                   if res[1] > 0 then
                      AM_stroke_color = GHUD_active_resists_border_color
                      AMstrokeWidth = 2
                      unit.setTimer('AM',0.016)
                   else
                      AM_stroke_color = GHUD_shield_stroke_color
                      AMstrokeWidth = 1
                   end
                   if res[2] > 0 then
                      EM_stroke_color = GHUD_active_resists_border_color
                      EMstrokeWidth = 2
                      unit.setTimer('EM',0.016)
                   else
                      EM_stroke_color = GHUD_shield_stroke_color
                      EMstrokeWidth = 1
                   end
                   if res[3] > 0 then
                      KI_stroke_color = GHUD_active_resists_border_color
                      KIstrokeWidth = 2
                      unit.setTimer('KI',0.016)
                   else
                      KI_stroke_color = GHUD_shield_stroke_color
                      KIstrokeWidth = 1
                   end
                   if res[4] > 0 then
                      TH_stroke_color = GHUD_active_resists_border_color
                      THstrokeWidth = 2
                      unit.setTimer('TH',0.016)
                   else
                      TH_stroke_color = GHUD_shield_stroke_color
                      THstrokeWidth = 1
                   end
                end
                
                resistance_SVG()
                
                am=0
                am_x = -50
                am_opacity = 1
                em=0
                em_x = -50
                em_opacity = 1
                ki=0
                ki_x = 339
                ki_opacity = 1
                th=0
                th_x = 339
                th_opacity = 1
                AM_res = ''
                EM_res = ''
                KI_res = ''
                TH_res = ''
                
                function damage_SVG()
                   if damage > 0 then
                      damage = damage - 0.08
                      damageLine = [[<rect x="]].. svghp + 145 ..[[" y="225" width="]]..damage..[[" height="50" style="fill: #de1656; stroke: #de1656;" bx:origin="0.5 0.5"/>]]
                   end
                   if damage <= 0 then
                      damage = 0
                      damageLine = ''
                   end
                
                   if ccshit > 0 then
                      ccshp = ccshp + 0.23
                      if ccshp >= ccshp1 then
                         ccshp = ccshp1
                         ccsLineHit = ''
                         ccshit = 0
                      end
                   end
                end
                
                function ccs_SVG()
                   --AM
                   if AM_stress ~= AM_last_stress then
                      AM_last_stress = AM_stress
                   end
                   if AM_svg < AM_last_stress then
                      AM_svg = AM_svg + 0.01
                      if AM_svg >= AM_last_stress then AM_svg = AM_last_stress
                   end
                end
                if AM_svg > AM_last_stress then
                   AM_svg = AM_svg - 0.01
                   if AM_svg <= AM_last_stress then AM_svg = AM_last_stress end
                end
                --EM
                if EM_stress ~= EM_last_stress then
                   EM_last_stress = EM_stress
                end
                if EM_svg < EM_last_stress then
                   EM_svg = EM_svg + 0.01
                   if EM_svg >= EM_last_stress then EM_svg = EM_last_stress end
                end
                if EM_svg > EM_last_stress then
                   EM_svg = EM_svg - 0.01
                   if EM_svg <= EM_last_stress then EM_svg = EM_last_stress end
                end
                --TH
                if TH_stress ~= TH_last_stress then
                   TH_last_stress = TH_stress
                end
                if TH_svg < TH_last_stress then
                   TH_svg = TH_svg + 0.01
                   if TH_svg >= TH_last_stress then TH_svg = TH_last_stress end
                end
                if TH_svg > TH_last_stress then
                   TH_svg = TH_svg - 0.01
                   if TH_svg <= TH_last_stress then TH_svg = TH_last_stress end
                end
                --KI
                if KI_stress ~= KI_last_stress then
                   KI_last_stress = KI_stress
                end
                if KI_svg < KI_last_stress then
                   KI_svg = KI_svg + 0.01
                   if KI_svg >= KI_last_stress then KI_svg = KI_last_stress end
                end
                if KI_svg > KI_last_stress then
                   KI_svg = KI_svg - 0.01
                   if KI_svg <= KI_last_stress then KI_svg = KI_last_stress end
                end
                end
                
                local stress = shield.getStressRatioRaw()
                AM_stress = stress[1]
                EM_stress = stress[2]
                KI_stress = stress[3]
                TH_stress = stress[4]
                AM_last_stress = stress[1]
                EM_last_stress = stress[2]
                TH_last_stress = stress[3]
                KI_last_stress = stress[4]
                ccs_SVG()
                
                function setTag(tag)
                local tag = tag:sub(5)
                system.print('Activated new transponder tag "'..tag..'"')
                tag = {tag}
                transponder.setTags(tag)
                end
                
                --debug coroutine
                function coroutine.xpcall(co)
                local output = {coroutine.resume(co)}
                if output[1] == false then
                   local tb = traceback(co)
                
                   local message = tb:gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk')
                   system.print(message)
                
                   message = output[2]:gsub('"%-%- |STDERROR%-EVENTHANDLER[^"]*"', 'chunk')
                   system.print(message)
                   return false, output[2], tb
                end
                return table.unpack(output)
                end
                
                lalt=false
                shift=false
                upB = false
                downB = false
                leftB = false
                rightB = false
                
                varcombat = construct.getPvPTimer()
                
                bhelper = false
                helper = false
                helper1 = false
                system.showHelper(0)
                system.showScreen(1)
                unit.hideWidget()
                tz1=0
                tz2=0
                brakeS = ''
                brakeDist = ''
                
                function indexSort(tbl)
                local idx = {}
                for i = 1, #tbl do idx[i] = i end
                table.sort(idx, function(a, b) return tbl[a] > tbl[b] end)
                return (table.unpack or unpack)(idx)
                end
                
                function getResRatioBy2HighestDamage(stress)
                local resRatio = {0,0,0,0}
                local h1, h2 = indexSort(stress)
                if stress[h2] > 0 then
                   resRatio[h1] = resMAX/2
                   resRatio[h2] = resMAX/2
                else
                   resRatio[h1] = resMAX
                end
                return resRatio
                end
                
                resMAX = shield.getResistancesPool()
                function getRes(stress, resMAX)
                local res = {0.15,0.15,0.15,0.15}
                if stress[1] >= stress[2] and
                stress[1] >= stress[3] and
                stress[1] > stress[4] then
                   res = {resMAX,0,0,0}
                elseif stress[2] >= stress[1] and
                   stress[2] >= stress[3] and
                   stress[2] > stress[4] then
                      res = {0,resMAX,0,0}
                   elseif stress[3] >= stress[1] and
                      stress[3] >= stress[2] and
                      stress[3] > stress[4] then
                         res = {0,0,resMAX,0}
                      elseif stress[4] >= stress[1] and
                         stress[4] >= stress[2] and
                         stress[4] > stress[3] then
                            res = {0,0,0,resMAX}
                         end
                         return res
                      end
                      shoteCount = 0
                      lastShotTime = system.getArkTime()
                      resCLWN = ""
                
                      if GHUD_shield_auto_calibration == true then
                         if GHUD_shield_calibration_max then
                            shieldText = "MAX - SHIELD"
                            shieldIcon = "A"
                         else
                            shieldText = "50/50 - SHIELD"
                            shieldIcon = "A"
                         end
                      else
                         if GHUD_shield_calibration_max then
                            shieldText = "MAX - SHIELD"
                            shieldIcon = "M"
                         else
                            shieldText = "50/50 - SHIELD"
                            shieldIcon = "M"
                         end
                      end
                
                      brakeText = ""
                      if shield.isActive() == 0 then
                         shieldColor = "#fc033d"
                         shieldStatus = "DEACTIVE"
                      else
                         shieldColor = "#2ebac9"
                         shieldStatus = "ACTIVE"
                      end
                
                      venttime = 0
                      venttimemax = shield.getVentingMaxCooldown()
                      resisttimemax = shield.getResistancesMaxCooldown()
                
                      mybr=false
                      dis=0
                      accel=0
                      resString = ""
                      throttle1=0
                      fuel1=0
                
                      blink=1
                      shieldAlarm = false
                      alarmTimer = false
                      t2=nil
                
                      local opt1=system.getActionKeyName('option1')
                      local opt2=system.getActionKeyName('option2')
                      local opt3=system.getActionKeyName('option3')
                      local opt4=system.getActionKeyName('option4')
                      local opt5=system.getActionKeyName('option5')
                      local opt6=system.getActionKeyName('option6')
                      local opt7=system.getActionKeyName('option7')
                      local opt8=system.getActionKeyName('option8')
                      local opt9=system.getActionKeyName('option9')
                      local shifttext=system.getActionKeyName('lshift')
                      local geartext=system.getActionKeyName('gear')
                      local alttext=system.getActionKeyName('lalt')
                      local forwardtext=system.getActionKeyName('forward')
                      local backwardtext=system.getActionKeyName('backward')
                      local uptext=system.getActionKeyName('up')
                      local downtext=system.getActionKeyName('down')
                      local lefttext=system.getActionKeyName('left')
                      local antigravtext = system.getActionKeyName('antigravity')
                      local righttext=system.getActionKeyName('right')
                      local yawlefttext=system.getActionKeyName('yawleft')
                      local yawrighttext=system.getActionKeyName('yawright')
                      local braketext1=system.getActionKeyName('brake')
                      local lighttext=system.getActionKeyName('light')
                
                      helpHTML = [[
                      <html>
                      <style>
                      html,
                      body {
                         background-image: linear-gradient(to right bottom, #1a0a13, #1e0f1a, #201223, #21162c, #1e1b36, #322448, #4a2b58, #653265, #a43b65, #d35551, #e78431, #dabb10);
                      }
                      .helperCenter {
                         position: absolute;
                         top: 50%;
                         left: 50%;
                         color: white;
                         font-family: "Roboto Slab", serif;
                         font-size: 1.5em;
                         text-align: center;
                         transform: translate(-50%, -50%);
                      }
                      ibold {
                         font-weight: bold;
                      }
                      .topL {
                         position: absolute;
                         top: 1vh;
                         left: 1vw;
                         display: flex;
                      }
                      .bottomL {
                         position: absolute;
                         bottom: 1vh;
                         left: 1vw;
                         display: flex;
                      }
                      .helper1 {
                         color: white;
                         font-family: "Roboto Slab", serif;
                         font-size: 1em;
                      }
                      .helper2 {
                         margin-left: 2vw;
                         color: white;
                         font-family: "Roboto Slab", serif;
                         font-size: 1em;
                      }
                      .helper3 {
                         color: white;
                         font-family: "Roboto Slab", serif;
                         font-size: 1em;
                      }
                      .helper4 {
                         margin-left: 2vw;
                         color: white;
                         font-family: "Roboto Slab", serif;
                         font-size: 1em;
                      }
                      .hudversion {
                         position: absolute;
                         bottom: 0.15vh;
                         color: white;
                         right: 5.25vw;
                         font-family: verdana;
                         letter-spacing: 0.5px;
                         font-size: 1.2em;
                      }
                      bdr {
                         color: white;
                         background-color: green;
                         padding-right: 4px;
                         padding-left: 4px;
                         padding-top: 2px;
                         padding-bottom: 2px;
                         border-radius: 6px;
                         border: 2.5px solid white;
                      }
                      luac {
                         color: white;
                         background-color: green;
                         padding-right: 4px;
                         padding-left: 4px;
                         padding-top: 2px;
                         padding-bottom: 2px;
                         border: 2.5px solid white;
                      }
                      </style>
                      <body>
                      <div class="topL">
                      <div class="helper1">
                      <ibold>SHIELD:</ibold>
                      <br>
                      <br>
                      <bdr>]]..opt9..[[</bdr> : start/stop venting<br>
                      <br>
                      <bdr>]]..opt8..[[</bdr> : on/off shield<br>
                      <br>
                      <bdr>]]..opt7..[[</bdr> : switch AUTO/MANUAL shield mode<br>
                      <br>
                      <bdr>]]..shifttext..[[</bdr> + <bdr>]]..opt7..[[</bdr> : switch shield mode between MAX and 50/50 mode<br>
                      <br>
                      <bdr>]]..opt6..[[</bdr> : agree and apply resists in manual shield mode<br>
                      <br>
                      <bdr>]]..uptext..[[</bdr> + <bdr>]]..opt1..[[</bdr> : 100% antimatter power<br>
                      <br>
                      <bdr>]]..uptext..[[</bdr> + <bdr>]]..opt2..[[</bdr> : 100% electromagnetic power<br>
                      <br>
                      <bdr>]]..uptext..[[</bdr> + <bdr>]]..opt3..[[</bdr> : 100% thermic power<br>
                      <br>
                      <bdr>]]..uptext..[[</bdr> + <bdr>]]..opt4..[[</bdr> : 100% kinetic power<br>
                      <br>
                      <bdr>]]..downtext..[[</bdr> + <bdr>]]..opt1..[[</bdr> : cannon profile<br>
                      <br>
                      <bdr>]]..downtext..[[</bdr> + <bdr>]]..opt2..[[</bdr> : railgun profile<br>
                      <br>
                      <bdr>]]..downtext..[[</bdr> + <bdr>]]..opt3..[[</bdr> : laser profile<br>
                      <br>
                      <bdr>]]..downtext..[[</bdr> + <bdr>]]..opt4..[[</bdr> : universal profile<br>
                      </div>
                      <div class="helper2">
                      <ibold>OTHER:</ibold>
                      <br>
                      <br>
                      <bdr>]]..braketext1..[[</bdr> + <bdr>]]..shifttext..[[</bdr> : lock brake<br>
                      </div>
                      </div>
                      <div class="bottomL">
                      <div class="helper3">
                      <ibold>SHIELD LUA COMMANDS:</ibold>
                      <br>
                      <br>
                      <luac>am</luac> : 100% antimatter power<br>
                      <br>
                      <luac>em</luac> : 100% electromagnetic power<br>
                      <br>
                      <luac>th</luac> : 100% thermic power<br>
                      <br>
                      <luac>ki</luac> : 100% kinetic power<br>
                      <br>
                      <luac>c</luac> : cannon profile<br>
                      <br>
                      <luac>r</luac> : railgun profile<br>
                      <br>
                      <luac>l</luac> : laser profile<br>
                      <br>
                      <luac>m</luac> : missile profile<br>
                      </div>
                      <div class="helper4">
                      <ibold>OTHER LUA COMMANDS:</ibold>
                      <br>
                      <br>
                      <luac>tag foxtrot</luac> : set transponder tag, where foxtrot is transponder tag<br>
                      <br>
                      <luac>drop</luac> : undock all constructs<br>
                      <br>
                      <luac>helper</luac> : show/hide build helper<br>
                      </div>
                      </div>
                      <div class="helperCenter">GEMINI FOUNDATION<br><br>Remote Controller Controls</div>
                      <div class="hudversion">GHUD v]]..HUD_version..[[</div>
                      </body>
                      </html>]]
                      Kinematic = {} -- just a namespace
                
                      function Kinematic.computeAccelerationTime(initial, acceleration, final)
                         -- ans: t = (vf - vi)/a
                         return (final - initial)/acceleration
                      end
                
                
                      function Kinematic.computeDistanceAndTime(initial,final,mass,thrust,t50,brakeThrust)
                
                         t50            = t50 or 0
                         brakeThrust    = brakeThrust or 0 -- usually zero when accelerating
                
                         local speedUp  = initial < final
                         local a0       = thrust / (speedUp and mass or -mass)
                         local b0       = -brakeThrust/mass
                         local totA     = a0+b0
                
                         if initial == final then
                            return 0, 0   -- trivial
                         elseif speedUp and totA <= 0 or not speedUp and totA >= 0 then
                            return -1, -1 -- no solution
                         end
                
                         local distanceToMax, timeToMax = 0, 0
                
                         if a0 ~= 0 and t50 > 0 then
                
                            local c1  = math.pi/t50/2
                
                            local v = function(t)
                            return a0*(t/2 - t50*math.sin(c1*t)/math.pi) + b0*t + initial
                         end
                
                         local speedchk = speedUp and function(s) return s >= final end or
                         function(s) return s <= final end
                            timeToMax  = 2*t50
                
                            if speedchk(v(timeToMax)) then
                               local lasttime = 0
                
                               while math.abs(timeToMax - lasttime) > 0.25 do
                                  local t = (timeToMax + lasttime)/2
                                  if speedchk(v(t)) then
                                     timeToMax = t
                                  else
                                     lasttime = t
                                  end
                               end
                            end
                
                            -- Closed form solution for distance exists (t <= 2*t50):
                            local K       = 2*a0*t50^2/math.pi^2
                            distanceToMax = K*(math.cos(c1*timeToMax) - 1) +
                            (a0+2*b0)*timeToMax^2/4 + initial*timeToMax
                
                            if timeToMax < 2*t50 then
                               return distanceToMax, timeToMax
                            end
                            initial = v(timeToMax)
                         end
                         -- At full thrust, motion follows Newton's formula:
                         local a = a0+b0
                         local t = Kinematic.computeAccelerationTime(initial, a, final)
                         local d = initial*t + a*t*t/2
                         return distanceToMax+d
                      end
                
                      system.print('GHUD Remote controller v'..HUD_version)
                      system.print(''..geartext..' + →: helper')
                
                      transponder.deactivate() --transponder server bug fix
                      unit.setTimer('hud',0.016)
                      unit.setTimer('brake',0.15)
                      unit.setTimer('tr',2)
                      unit.setTimer('prealarm',2)
                      if warpdrive ~= nil then
                         unit.setTimer('warp',35)
                      end
                      if collectgarbages == true then
                         unit.setTimer('cleaner',30)
                      end
        onTimer:
            args: ['hud']
            lua: |
                    damage_SVG()
                    
                    varcombat = construct.getPvPTimer()
                    
                    if varcombat > 0 and varcombat < 302 then
                       local stress = shield.getStressRatioRaw()
                       AM_stress = stress[1]
                       EM_stress = stress[2]
                       KI_stress = stress[3]
                       TH_stress = stress[4]
                    end
                    ccs_SVG()
                    
                    local HP = shield.getShieldHitpoints()/shieldMaxHP * 100
                    local formatted_hp = string.format('%0.0f',math.ceil(HP))
                    
                    if shield.isActive() == 0 then
                       svghp = maxSHP * (HP*0.01)
                       local shield_hp = shield.getShieldHitpoints()
                       last_shield_hp = shield_hp
                       shieldColor = "#fc033d"
                       shieldStatus = "DEACTIVE"
                    else
                       shieldColor = "#2ebac9"
                       shieldStatus = "ACTIVE"
                    end
                    
                    if (system.getArkTime() - lastShotTime) >= 40 then
                       shoteCount = 0
                    end
                    
                    local resisttime = shield.getResistancesCooldown()
                    if resisttime ~= 0 then
                       resCLWN = math.floor(resisttime)
                    else
                       resCLWN = ''
                    end
                    
                    if shield.isVenting() == 1 then
                       shieldStatus = 'VENTING'
                    end
                    
                    venttime = shield.getVentingCooldown()
                    if venttime ~= 0 then
                       resCLWN = math.floor(venttime)
                    end
                    
                    local brakeHUD = ''
                    if mybr == true then
                       brakeHUD = [[
                       <style>
                       .main1 {
                          position: absolute;
                          width: content;
                          padding: 10px;
                          top: ]]..GHUD_brake_Y..[[%;
                          left: 50%;
                          transform: translateX(-50%);
                          text-align: center;
                          background: #142027;
                          color: white;
                          font-family: "Lucida" Grande, sans-serif;
                          font-size: 1.5em;
                          border-radius: 5vh;
                          border: 4px solid #FFB12C;
                          </style>
                          <div class="main1">BRAKE ENGAGED</div>]]
                       else
                          brakeHUD = ''
                       end
                    
                       local warningmsg = ''
                       if math.ceil(HP) <= 50 then
                          warningmsg = [[<style>
                          .warningmsg {
                             position: absolute;
                             top: ]]..GHUD_shield_warning_message_Y..[[%;
                             left: 50%;
                             transform: translate(-50%, -50%);
                             padding: 10px;
                             width: content;
                             text-align: center;
                             background: ]]..GHUD_background_color..[[;
                             color: #fc033d;
                             font-family: "Lucida" Grande, sans-serif;
                             font-weight: bold;
                             font-size: 1.25em;
                             border-radius: 5vh;
                             border: 4px solid #FFB12C;
                             </style>
                             <div class="warningmsg">SHIELD LOW</div>]]
                          end
                    
                          if t2 == true then
                             blink = blink + 0.015
                             if blink >= 1 then
                                t2=false
                             end
                          end
                    
                          if t2 == false then
                             blink = blink - 0.015
                             if blink < 0.4 then
                                t2=true
                             end
                          end
                    
                          if math.ceil(HP) <= 35 then
                             shieldAlarm=true
                             if alarmTimer == true then
                                warningmsg = [[<style>
                                .warningmsg {
                                   position: absolute;
                                   top: ]]..GHUD_shield_warning_message_Y..[[%;
                                   left: 50%;
                                   transform: translate(-50%, -50%);
                                   padding: 10px;
                                   width: content;
                                   text-align: center;
                                   background: ]]..GHUD_background_color..[[;
                                   color: #fc033d;
                                   opacity: ]]..blink..[[;
                                   font-family: "Lucida" Grande, sans-serif;
                                   font-weight: bold;
                                   font-size: 1.25em;
                                   border-radius: 5vh;
                                   border: 4px solid #FFB12C;
                                   </style>
                                   <div class="warningmsg">SHIELD LOW</div>]]
                                end
                             else
                                shieldAlarm = false
                             end
                    
                             local thrust1 = math.floor(unit.getThrottle())
                             local accel = math.floor((json.decode(unit.getWidgetData()).acceleration/9.80665)*10)/10
                             local sp1 = construct.getWorldVelocity()
                             local speed = math.floor(vec3(sp1):len() * 3.6)
                             local maxSpeed = math.floor(construct.getMaxSpeed() * 3.6)
                             --local closestPlanet = getClosestPlanet(shipPos)
                    
                             local htmlHUD = [[
                             <html>
                             <style>
                             html,body {
                                margin:0;
                                padding:0;
                                overflow: hidden;
                             }
                             .shield1 {
                                position: absolute;
                                width: ]]..GHUD_shield_panel_size..[[vh;
                                top: ]]..GHUD_shield_panel_Y..[[vh;
                                opacity: ]]..GHUD_shield_panel_opacity..[[;
                                left: 50%;
                                transform: translate(-50%, -50%);
                                filter: drop-shadow(0 0 15px blue);
                             }
                             .center1 {
                                position: relative;
                                margin-left: 50%;
                                margin-top: calc(]]..GHUD_Y..[[vh - 68px);
                                color: white;
                             }
                             .right1 {
                                color: rgb(0, 191, 255);
                                position: absolute;
                                left: ]]..GHUD_right_block_X..[[%;
                                text-align:left;
                                font-size:18px;
                                font-family: verdana;
                                font-weight: bold;
                                text-shadow: 1px 0 1px #000,
                                0 1px 1px #000,
                                -1px 0 1px #000,
                                0 -1px 1px #000;
                             }
                             .thrust1 {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                font-size:20px;
                                justify-content: flex-end;
                                left: -101%;
                                margin-top: -1px;
                             }
                             .speed1 {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                font-size:20px;
                                justify-content: flex-end;
                                left: -101%;
                                margin-top: -1px;
                             }
                             .accel1 {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                font-size:20px;
                                justify-content: flex-end;
                                left: -101%;
                                margin-top: -1.5px;
                             }
                             .brakedist {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                font-size:20px;
                                justify-content: flex-end;
                                left: -101%;
                                margin-top: -1.5px;
                             }
                             .left1 {
                                color: rgb(0, 191, 255);
                                position: absolute;
                                right: ]]..GHUD_left_block_X..[[%;
                                text-align: right;
                                font-size:18px;
                                font-family: verdana;
                                font-weight: bold;
                                text-shadow: 1px 0 1px #000,
                                0 1px 1px #000,
                                -1px 0 1px #000,
                                0 -1px 1px #000;
                             }
                             .shieldtext {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                justify-content: flex-end;
                                font-size:20px;
                                margin-left: -23px;
                                margin-top: -1px;
                             }
                             .fueltext {
                                color: white;
                                position: absolute;
                                width: 100%;
                                display: flex;
                                justify-content: flex-end;
                                font-size:20px;
                                margin-left: -23px;
                                margin-top: -1px;
                             }
                             .shield2 {
                                position: absolute;
                                margin-top: calc(-100% + 5px);
                                margin-left: 40%;
                                width: 120px;
                                height: 120px;
                             }
                             .fuel1 {
                                position: absolute;
                                margin-top:calc(-100% + 5px);
                                margin-left: 40%;
                                width: 120px;
                                height: 120px;
                             }
                             red1 {
                                color: #fc033d;
                             }
                             green1 {
                                color: #07e88e;
                             }
                             white1 {
                                color: white;
                             }
                             mspeed {
                                color: white;
                                opacity: 0.25;
                             }
                             blue1 {
                                color: rgb(0, 191, 255);
                             }
                             it {
                                font-style: italic;
                             }
                             orange1 {
                                color: #FFB12C;
                             }
                             </style>
                             <body>
                             ]]..warningmsg..[[
                             ]]..brakeHUD..[[
                             <div class="center1"></div>
                             <div class="right1">THRUST<br><div class="thrust1">]]..thrust1..[[</div><orange1>%</orange1><br>SPEED<br><div class="speed1">]]..speed..[[</div><orange1>KM/H</orange1><mspeed> ]]..maxSpeed..[[</mspeed><br>ACCEL<br><div class="accel1">]]..accel..[[</div><orange1>G</orange1><br>BRAKE-DIST<br><div class="brakedist">]]..brakeDist..[[</div><orange1>]]..brakeS..[[</orange1></div>
                             <div class="left1">SHIELD<div class="shield2"><svg viewBox="0 0 100 100" fill="none" stroke="]]..shieldColor..[[" stroke-width="1.8" stroke-linecap="round" stroke-linejoin="round" xmlns="http://www.w3.org/2000/svg">
                             <path d="M 50 60 C 50 60 58 56 58 50 L 58 43 L 50 40 L 42 43 L 42 50 C 42 56 50 60 50 60 Z"/>
                             <text style="fill: rgb(0, 191, 255); font-family: verdana; font-size: 13px; font-weight: 700; stroke-width: 0px; text-anchor: middle;" x="50" y="53.737">]]..shieldIcon..[[</text>
                             </svg></div><br><div class="shieldtext">]]..formatted_hp..[[</div><orange1>%</orange1><br>FUEL<div class="fuel1"><svg viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                             <g fill="none" fill-rule="evenodd" transform="matrix(1, 0, 0, 1, -18, -4.5)">
                             <path d="M68 63c3.038 0 5.5-2.493 5.5-5.567 0-2.05-1.833-5.861-5.5-11.433-3.667 5.572-5.5 9.383-5.5 11.433C62.5 60.507 64.962 63 68 63z" fill="#FFB12C"/>
                             </g>
                             </svg></div><br><div class="fueltext">]]..fuel_lvl..[[</div><orange1>%</orange1></div>
                             <div class="shield1"><?xml version="1.0" encoding="utf-8"?>
                             <svg viewBox="0 0 500 500" xmlns="http://www.w3.org/2000/svg" xmlns:bx="https://boxy-svg.com">
                             <defs>
                             <linearGradient id="AM_gradient" x1="100%" x2="0%">
                             <stop stop-color="#fc033d" offset="]]..AM_svg..[[" />
                             <stop stop-color="]]..GHUD_shield_background_color..[[" offset="0" />
                             </linearGradient>
                             <linearGradient id="EM_gradient" x1="100%" x2="0%">
                             <stop stop-color="#fc033d" offset="]]..EM_svg..[[" />
                             <stop stop-color="]]..GHUD_shield_background_color..[[" offset="0" />
                             </linearGradient>
                             <linearGradient id="TH_gradient" x1="100%" x2="0%">
                             <stop stop-color="#fc033d" offset="]]..TH_svg..[[" />
                             <stop stop-color="]]..GHUD_shield_background_color..[[" offset="0" />
                             </linearGradient>
                             <linearGradient id="KI_gradient" x1="100%" x2="0%">
                             <stop stop-color="#fc033d" offset="]]..KI_svg..[[" />
                             <stop stop-color="]]..GHUD_shield_background_color..[[" offset="0" />
                             </linearGradient>
                             </defs>
                             <rect x="145" y="225" width="210" height="50" style="fill: ]]..GHUD_shield_empty_background_layer_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[;" bx:origin="0.5 0.5"/>
                             <rect x="145" y="225" width="]]..svghp..[[" height="50" style="fill: ]]..GHUD_shield_background_color..[[; stroke: ]]..GHUD_shield_background_color..[[;" bx:origin="0.5 0.5"/>
                             ]]..damageLine..[[
                             ]]..ccsLineHit..[[
                             <rect x="180.2" y="220.2" width="]]..ccshp..[[" height="4.8" style="fill: white; stroke: white; stroke-width:0;"/>
                             <path style="fill: rgba(0, 0, 0, 0); stroke: ]]..GHUD_shield_stroke_color..[[;" d="M 180.249 220.227 L 319.749 220.175 L 315.834 225 L 184.159 225 L 180.249 220.227 Z"/>
                             <rect x="180.2" y="275" width="]]..FUEL_svg..[[" height="4.8" style="fill: #FFB12C; stroke: #FFB12C; stroke-width:0;"/>
                             <path style="fill: rgba(0,0,0,0); stroke: ]]..GHUD_shield_stroke_color..[[;" d="M 180.2 275.052 L 319.7 275 L 315.785 279.825 L 184.11 279.825 L 180.2 275.052 Z" transform="matrix(-1, 0, 0, -1, 499.900004, 554.825024)"/>
                             <path style="fill: url(#AM_gradient); stroke: ]]..AM_stroke_color..[[; stroke-width: ]]..AMstrokeWidth..[[;" d="M 125 215 L 185 250 L 95 250 L 85 240 L 125 215 Z" transform="matrix(-1, 0, 0, -1, 270.000006, 465.00001)"/>
                             <path style="fill: url(#TH_gradient); stroke: ]]..TH_stroke_color..[[; stroke-width: ]]..THstrokeWidth..[[;" d="M 315 225 L 325 215 L 415 215 L 355 250 L 315 225 Z"/>
                             <path style="fill: url(#KI_gradient); stroke: ]]..KI_stroke_color..[[; stroke-width: ]]..KIstrokeWidth..[[;" d="M 355 250 L 415 285 L 325 285 L 315 275 L 355 250 Z"/>
                             <path style="fill: url(#EM_gradient); stroke: ]]..EM_stroke_color..[[; stroke-width: ]]..EMstrokeWidth..[[;" d="M 85 260 L 95 250 L 185 250 L 125 285 L 85 260 Z" transform="matrix(-1, 0, 0, -1, 270.000006, 535.000011)"/>
                             <polygon style="fill: ]]..GHUD_shield_background2_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[; stroke-linejoin: round; stroke-linecap: round;" points="239 225 244 231 256 231 261 225"></polygon>
                             <polygon style="fill: ]]..GHUD_shield_background2_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[; stroke-linejoin: round; stroke-linecap: round;" points="235 269 240 275 260 275 265 269" transform="matrix(-1, 0, 0, -1, 500, 544)"></polygon>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 4.5px; font-weight: 700; text-anchor: middle;" transform="matrix(1, 0, 0, 1, -1.542758, -0.533447)"><tspan x="251.796" y="230.312">]]..resCLWN..[[</tspan></text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 4px; font-weight: 700; text-anchor: middle;" x="250.048" y="273.416">]]..shieldStatus..[[</text>
                             <text style="fill: ]]..GHUD_shield_stroke_color..[[; font-family: Arial, sans-serif; font-weight: bold; font-size: 3.2px; text-anchor: middle;" x="250" y="223.591">CCS</text>
                             <polygon style="fill: ]]..GHUD_shield_background2_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[; stroke-linejoin: round; stroke-linecap: round;" points="235 279.8 240 285.8 260 285.8 265 279.8"></polygon>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 4px; font-weight: 700; text-anchor: middle;" x="250.28" y="284.311">]]..avWarp..[[/]]..totalWarp..[[</text>
                             <path style="fill: ]]..GHUD_shield_background2_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[; stroke-linecap: round; stroke-linejoin: round;" d="M 220 279.8 L 225 285.8 L 240 285.8 L 235 279.8 L 220 279.8 Z" transform="matrix(-1, 0, 0, -1, 460, 565.599976)"></path>
                             <path style="fill: ]]..GHUD_shield_background2_color..[[; stroke: ]]..GHUD_shield_stroke_color..[[; stroke-linecap: round; stroke-linejoin: round;" d="M 265 279.8 L 260 285.8 L 275 285.8 L 280 279.8 L 265 279.8 Z" transform="matrix(-1, 0, 0, -1, 540, 565.599976)"></path>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 3.5px; font-weight: 700; text-anchor: middle;" x="230.218" y="284.182">WARP</text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 3.5px; font-weight: 700; text-anchor: middle;" x="269.736" y="284.129">CELLS</text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 16px; font-weight: 700; paint-order: stroke; stroke: ]]..GHUD_shield_text_stroke_color..[[; stroke-width: 1.25px;" transform="matrix(1, 0, 0, 1, -0.542236, -41.161256)"><tspan x="351.543" y="319.558">KI</tspan></text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 16px; font-weight: 700; paint-order: stroke; stroke: ]]..GHUD_shield_text_stroke_color..[[; stroke-width: 1.25px;" transform="matrix(1, 0, 0, 1, -4.542999, -86.161257)"><tspan x="351.543" y="319.558">TH</tspan></text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 16px; font-weight: 700; paint-order: stroke; stroke: ]]..GHUD_shield_text_stroke_color..[[; stroke-width: 1.25px;" transform="matrix(1, 0, 0, 1, -219.543004, -41.161256)"><tspan x="351.543" y="319.558">EM</tspan></text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 16px; font-weight: 700; paint-order: stroke; stroke: ]]..GHUD_shield_text_stroke_color..[[; stroke-width: 1.25px;" transform="matrix(1, 0, 0, 1, -219.543004, -86.161257)"><tspan x="351.543" y="319.558">AM</tspan></text>
                             <text style="fill: ]]..GHUD_shield_text_color..[[; font-family: Arial, sans-serif; font-size: 20px; font-weight: 700; paint-order: stroke; stroke: ]]..GHUD_shield_text_stroke_color..[[; stroke-width: 1.25px; text-anchor: middle;" x="252" y="257.079">]]..formatted_hp..[[%</text>
                             ]]..AM_res..[[
                             ]]..EM_res..[[
                             ]]..KI_res..[[
                             ]]..TH_res..[[
                             </svg></div>
                             </body>
                             </html>]]
                    
                             if helper == false and helper1 == false then system.setScreen(htmlHUD) end
        onTimer:
            args: ['tr']
            lua: |
                    transponder.activate()
                    unit.stopTimer('tr')
        onTimer:
            args: ['brake']
            lua: |
                    fuel_lvl = math.ceil(spacefueltank_1.getItemsVolume()/spacefueltank_1.getMaxVolume() * 100)
                    FUEL_svg = maxFUEL * (fuel_lvl * 0.01)
                    local maxBrake = json.decode(unit.getWidgetData()).maxBrake
                    local dockedMass = 0
                    for _,id in pairs(construct.getDockedConstructs()) do 
                       dockedMass = dockedMass + construct.getDockedConstructMass(id)
                    end
                    for _,id in pairs(construct.getPlayersOnBoard()) do 
                       dockedMass = dockedMass + construct.getBoardedPlayerMass(id)
                    end
                    local mass = construct.getMass()
                    local speedVec = vec3(construct.getWorldVelocity())
                    local speed = speedVec:len() * 3.6
                    local dis = Kinematic.computeDistanceAndTime(speed/3.6,0,mass + dockedMass,0,0,maxBrake)
                    if dis > 100000 then
                       brakeDist = string.format(math.floor((dis/200000) * 10)/10)
                       brakeS = "SU"
                    elseif dis > 1000 then
                       brakeDist = string.format(math.floor((dis/1000)*10)/10)
                       brakeS = "KM"
                    else
                       brakeDist = string.format(math.floor(dis))
                       brakeS = "M"
                    end
        onTimer:
            args: ['prealarm']
            lua: |
                    if shieldAlarm == false then 
                        t2=nil
                        alarmTimer = false
                    end
                    if shieldAlarm == true and alarmTimer == false then
                    alarmTimer = true
                    t2=false
                    end
                    if warpdrive ~= nil then
                    avWarp = warpdrive.getRequiredWarpCells()
                    end
        onTimer:
            args: ['AM']
            lua: |
                    am = am + 2
                    if am_x >= -50 then
                        am_x = am_x + 3
                    end
                    if am_x >= 0 then am_x = 0 end
                    AM_res = [[
                        <g transform="matrix(1, 0, 0, 1, ]]..am_x..[[, 0)">
                        <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                        <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                      </g>
                    ]]
                    if am >= 120 then
                        am_opacity = am_opacity - 0.01
                        AM_res = [[
                        <g opacity="]]..am_opacity..[[" transform="matrix(1, 0, 0, 1, 0, 0)">
                        <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                        <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                      </g>
                    ]]
                    if am_opacity <= 0 then
                        am_opacity = 1
                        am = 0
                        am_x = -50
                        AM_res = ''
                        unit.stopTimer('AM')
                    end
                    end
        onTimer:
            args: ['EM']
            lua: |
                    em = em + 2
                    if em_x >= -50 then
                        em_x = em_x + 3
                    end
                    if em_x >= 0 then em_x = 0 end
                    EM_res = [[
                      <g transform="matrix(1, 0, 0, 1, ]]..em_x..[[, 90)">
                      <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                      <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                    </g>
                    ]]
                    if em >= 120 then
                        em_opacity = em_opacity - 0.01
                        EM_res = [[
                          <g opacity="]]..em_opacity..[[" transform="matrix(1, 0, 0, 1, 0, 90)">
                          <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                          <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                        </g>
                    ]]
                    if em_opacity <= 0 then
                        em_opacity = 1
                        em = 0
                        em_x = -50
                        EM_res = ''
                        unit.stopTimer('EM')
                    end
                    end
        onTimer:
            args: ['TH']
            lua: |
                    th = th + 2
                    if th_x <= 339 then
                        th_x = th_x - 3
                    end
                    if th_x <= 289 then th_x = 289 end
                    TH_res = [[
                      <g transform="matrix(1, 0, 0, 1, ]]..th_x..[[, 0)">
                      <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                      <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                    </g>
                    ]]
                    if th >= 120 then
                        th_opacity = th_opacity - 0.01
                        TH_res = [[
                          <g opacity="]]..th_opacity..[[" transform="matrix(1, 0, 0, 1, 289, 0)">
                          <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: #FFB12C;" rx="6"/>
                          <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                        </g>
                    ]]
                    if th_opacity <= 0 then
                        th_opacity = 1
                        th = 0
                        th_x = 339
                        TH_res = ''
                        unit.stopTimer('TH')
                    end
                    end
        onTimer:
            args: ['KI']
            lua: |
                    ki = ki + 2
                    if ki_x <= 339 then
                        ki_x = ki_x - 3
                    end
                    if ki_x <= 289 then ki_x = 289 end
                    KI_res = [[
                      <g transform="matrix(1, 0, 0, 1, ]]..ki_x..[[, 90)">
                      <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: rgb(242, 166, 4);" rx="6"/>
                      <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                    </g>
                    ]]
                    if ki >= 120 then
                        ki_opacity = ki_opacity - 0.01
                        KI_res = [[
                          <g opacity="]]..ki_opacity..[[" transform="matrix(1, 0, 0, 1, 289, 90)">
                          <rect x="82" y="199" width="45" height="12" style="stroke: black; stroke-width: 1.5px; fill: rgb(242, 166, 4);" rx="6"/>
                          <text style="fill: rgb(51, 51, 51); font-family: Arial, sans-serif; font-size: 7.87472px; font-weight: 700; white-space: pre;" transform="matrix(0.831276, 0, 0, 0.88892, -62.084976, 26.864447)"><tspan x="179.08" y="202.948">ACTIVATED</tspan></text>
                        </g>
                    ]]
                    if ki_opacity <= 0 then
                        ki_opacity = 1
                        ki = 0
                        ki_x = 339
                        KI_res = ''
                        unit.stopTimer('KI')
                    end
                    end
        onTimer:
            args: ['warp']
            lua: |
                    totalWarp = warpdrive.getAvailableWarpCells()
        onTimer:
            args: ['cleaner']
            lua: |
                    collectgarbage("collect")
    construct:
        onPvPTimer(active):
            lua: |
                --false:
                if active == 0 then
                    CCS = 0
                    ccshp1 = maxCCS * (CCS * 0.01)
                    ccshp = ccshp1
                    last_core_stress = 0
                    last_shield_hp = shieldMaxHP
                    svghp = maxSHP
                end
    core:
        onStressChanged(stress):
            lua: |
                local stress = core.getCoreStress()
                if stress > last_core_stress then
                    local newstress = stress - last_core_stress
                    local stresschange = newstress/core.getMaxCoreStress()*100
                    CCS = stress/core.getMaxCoreStress() * 100
                    ccshp1 = maxCCS * (CCS * 0.01)
                    ccshit = maxCCS * (stresschange*0.01)
                    last_core_stress = stress
                    ccsLineHit = [[<rect x="180.2" y="220.2" width="]]..ccshp1..[[" height="4.8" style="fill: #de1656; stroke: rgba(0,0,0,0);"/>]]
                end
    shield:
        onAbsorbed(hitpoints, rawHitpoints):
            lua: |
                local shield_hp = shield.getShieldHitpoints()
                if shield_hp < last_shield_hp then
                   local HP = shield_hp/shieldMaxHP * 100
                   local hit = last_shield_hp - shield_hp
                   local damage1 = hit/shieldMaxHP*100
                   damage = maxSHP * (damage1*0.01)
                   svghp = maxSHP * (HP*0.01)
                   last_shield_hp = shield_hp
                end
                
                lastShotTime = system.getArkTime()
                shoteCount = shoteCount + 1
                local stress = shield.getStressRatioRaw()
                AM_stress = stress[1]
                EM_stress = stress[2]
                KI_stress = stress[3]
                TH_stress = stress[4]
                
                if shield.getResistancesCooldown() == 0 and shoteCount >= 5 and GHUD_shield_auto_calibration then
                
                   local resistance = shield.getResistances()
                   local res = getRes(stress, resMAX)
                   
                   if GHUD_shield_calibration_max then
                      if resistance[1] == res[1] and
                      resistance[2] == res[2] and
                      resistance[3] == res[3] and
                      resistance[4] == res[4]then
                         --system.print("Максимальный стресс не изменился")
                      else
                         if shield.setResistances(res[1],res[2],res[3],res[4]) == 1 then
                            system.print("Shield power has been set to max stress")
                            actionRes(res)
                            system.playSound('shieldNewResists.mp3')
                         end
                      end
                   else
                      local re1 = getResRatioBy2HighestDamage(stress)[1]
                      local re2 = getResRatioBy2HighestDamage(stress)[2]
                      local re3 = getResRatioBy2HighestDamage(stress)[3]
                      local re4 = getResRatioBy2HighestDamage(stress)[4]
                      if re1 == resistance[1] and
                      re2 == resistance[2] and
                      re3 == resistance[3] and
                      re4 == resistance[4] then
                         --system.print("2 максимальных стресса не изменились")
                      else
                         if shield.setResistances(re1,re2,re3,re4) == 1 then
                            system.print("Shield power has been split 50/50%")
                            local re = {re1,re2,re3,re4}
                            actionRes(re)
                            system.playSound('shieldNewResists.mp3')
                         end
                      end
                   end
                end
        onDown():
            lua: |
                local shield_hp = shield.getShieldHitpoints()
                last_shield_hp = shield_hp
                shield.startVenting()
                system.print("The shield is over, shield regeneration started!")
        onVenting(active, restoredHitpoints):
            lua: |
                if shield.isVenting() == 0 then
                    shield.activate()
                end
        onRestored():
            lua: |
                local shield_hp = shield.getShieldHitpoints()
                last_shield_hp = shield_hp
                svghp = maxSHP
                system.print("SHIELD READY")
        onToggled(active):
            lua: |
                if shield.isActive() == 1 then
                    local shield_hp = shield.getShieldHitpoints() 
                    last_shield_hp = shield_hp
                    local HP = shield_hp/shieldMaxHP * 100
                    svghp = maxSHP * (HP*0.01)
                end
    system:
        onFlush:
            lua: |
                -- constants: use 'myvar = defaultValue --export: description' to expose the variable in context menu

                local pitchSpeedFactor = 0.8 --export: This factor will increase/decrease the player input along the pitch axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local yawSpeedFactor =  1 --export: This factor will increase/decrease the player input along the yaw axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01
                local rollSpeedFactor = 1.5 --export: This factor will increase/decrease the player input along the roll axis<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local brakeSpeedFactor = 3 --export: When braking, this factor will increase the brake force by brakeSpeedFactor * velocity<br>Valid values: Superior or equal to 0.01
                local brakeFlatFactor = 1 --export: When braking, this factor will increase the brake force by a flat brakeFlatFactor * velocity direction><br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local autoRoll = false --export: [Only in atmosphere]<br>When the pilot stops rolling,  flight model will try to get back to horizontal (no roll)
                local autoRollFactor = 2 --export: [Only in atmosphere]<br>When autoRoll is engaged, this factor will increase to strength of the roll back to 0<br>Valid values: Superior or equal to 0.01

                local turnAssist = true --export: [Only in atmosphere]<br>When the pilot is rolling, the flight model will try to add yaw and pitch to make the construct turn better<br>The flight model will start by adding more yaw the more horizontal the construct is and more pitch the more vertical it is
                local turnAssistFactor = 2 --export: [Only in atmosphere]<br>This factor will increase/decrease the turnAssist effect<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                local torqueFactor = 2 -- Force factor applied to reach rotationSpeed<br>(higher value may be unstable)<br>Valid values: Superior or equal to 0.01

                -- validate params
                pitchSpeedFactor = math.max(pitchSpeedFactor, 0.01)
                yawSpeedFactor = math.max(yawSpeedFactor, 0.01)
                rollSpeedFactor = math.max(rollSpeedFactor, 0.01)
                torqueFactor = math.max(torqueFactor, 0.01)
                brakeSpeedFactor = math.max(brakeSpeedFactor, 0.01)
                brakeFlatFactor = math.max(brakeFlatFactor, 0.01)
                autoRollFactor = math.max(autoRollFactor, 0.01)
                turnAssistFactor = math.max(turnAssistFactor, 0.01)

                -- final inputs
                local finalPitchInput = pitchInput + system.getControlDeviceForwardInput()
                local finalRollInput = rollInput + system.getControlDeviceYawInput()
                local finalYawInput = yawInput - system.getControlDeviceLeftRightInput()
                local finalBrakeInput = brakeInput

                -- Axis
                local worldVertical = vec3(core.getWorldVertical()) -- along gravity
                local constructUp = vec3(construct.getWorldOrientationUp())
                local constructForward = vec3(construct.getWorldOrientationForward())
                local constructRight = vec3(construct.getWorldOrientationRight())
                local constructVelocity = vec3(construct.getWorldVelocity())
                local constructVelocityDir = vec3(construct.getWorldVelocity()):normalize()
                local currentRollDeg = getRoll(worldVertical, constructForward, constructRight)
                local currentRollDegAbs = math.abs(currentRollDeg)
                local currentRollDegSign = utils.sign(currentRollDeg)

                -- Rotation
                local constructAngularVelocity = vec3(construct.getWorldAngularVelocity())
                local targetAngularVelocity = finalPitchInput * pitchSpeedFactor * constructRight
                                                + finalRollInput * rollSpeedFactor * constructForward
                                                + finalYawInput * yawSpeedFactor * constructUp

                -- In atmosphere?
                if worldVertical:len() > 0.01 and unit.getAtmosphereDensity() > 0.0 then
                    local autoRollRollThreshold = 1.0
                    -- autoRoll on AND currentRollDeg is big enough AND player is not rolling
                    if autoRoll == true and currentRollDegAbs > autoRollRollThreshold and finalRollInput == 0 then
                        local targetRollDeg = utils.clamp(0,currentRollDegAbs-30, currentRollDegAbs+30);  -- we go back to 0 within a certain limit
                        if (rollPID == nil) then
                            rollPID = pid.new(autoRollFactor * 0.01, 0, autoRollFactor * 0.1) -- magic number tweaked to have a default factor in the 1-10 range
                        end
                        rollPID:inject(targetRollDeg - currentRollDeg)
                        local autoRollInput = rollPID:get()

                        targetAngularVelocity = targetAngularVelocity + autoRollInput * constructForward
                    end
                    local turnAssistRollThreshold = 20.0
                    -- turnAssist AND currentRollDeg is big enough AND player is not pitching or yawing
                    if turnAssist == true and currentRollDegAbs > turnAssistRollThreshold and finalPitchInput == 0 and finalYawInput == 0 then
                        local rollToPitchFactor = turnAssistFactor * 0.1 -- magic number tweaked to have a default factor in the 1-10 range
                        local rollToYawFactor = turnAssistFactor * 0.025 -- magic number tweaked to have a default factor in the 1-10 range

                        -- rescale (turnAssistRollThreshold -> 180) to (0 -> 180)
                        local rescaleRollDegAbs = ((currentRollDegAbs - turnAssistRollThreshold) / (180 - turnAssistRollThreshold)) * 180
                        local rollVerticalRatio = 0
                        if rescaleRollDegAbs < 90 then
                            rollVerticalRatio = rescaleRollDegAbs / 90
                        elseif rescaleRollDegAbs < 180 then
                            rollVerticalRatio = (180 - rescaleRollDegAbs) / 90
                        end

                        rollVerticalRatio = rollVerticalRatio * rollVerticalRatio

                        local turnAssistYawInput = - currentRollDegSign * rollToYawFactor * (1.0 - rollVerticalRatio)
                        local turnAssistPitchInput = rollToPitchFactor * rollVerticalRatio

                        targetAngularVelocity = targetAngularVelocity
                                            + turnAssistPitchInput * constructRight
                                            + turnAssistYawInput * constructUp
                    end
                end

                -- Engine commands
                local keepCollinearity = 1 -- for easier reading
                local dontKeepCollinearity = 0 -- for easier reading
                local tolerancePercentToSkipOtherPriorities = 1 -- if we are within this tolerance (in%), we don't go to the next priorities

                -- Rotation
                local angularAcceleration = torqueFactor * (targetAngularVelocity - constructAngularVelocity)
                local airAcceleration = vec3(construct.getWorldAirFrictionAngularAcceleration())
                angularAcceleration = angularAcceleration - airAcceleration -- Try to compensate air friction
                Nav:setEngineTorqueCommand('torque', angularAcceleration, keepCollinearity, 'airfoil', '', '', tolerancePercentToSkipOtherPriorities)

                -- Brakes
                local brakeAcceleration = -finalBrakeInput * (brakeSpeedFactor * constructVelocity + brakeFlatFactor * constructVelocityDir)
                Nav:setEngineForceCommand('brake', brakeAcceleration)

                -- AutoNavigation regroups all the axis command by 'TargetSpeed'
                local autoNavigationEngineTags = ''
                local autoNavigationAcceleration = vec3()
                local autoNavigationUseBrake = false

                -- Longitudinal Translation
                local longitudinalEngineTags = 'thrust analog longitudinal'
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byThrottle) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(longitudinalEngineTags,axisCommandId.longitudinal)
                    Nav:setEngineForceCommand(longitudinalEngineTags, longitudinalAcceleration, keepCollinearity)
                elseif  (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local longitudinalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.longitudinal)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. longitudinalEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + longitudinalAcceleration
                    if (Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal) == 0 or -- we want to stop
                        Nav.axisCommandManager:getCurrentToTargetDeltaSpeed(axisCommandId.longitudinal) < - Nav.axisCommandManager:getTargetSpeedCurrentStep(axisCommandId.longitudinal) * 0.5) -- if the longitudinal velocity would need some braking
                    then
                        autoNavigationUseBrake = true
                    end

                end

                -- Lateral Translation
                local lateralStrafeEngineTags = 'thrust analog lateral'
                local lateralCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.lateral)
                if (lateralCommandType == axisCommandType.byThrottle) then
                    local lateralStrafeAcceleration =  Nav.axisCommandManager:composeAxisAccelerationFromThrottle(lateralStrafeEngineTags,axisCommandId.lateral)
                    Nav:setEngineForceCommand(lateralStrafeEngineTags, lateralStrafeAcceleration, keepCollinearity)
                elseif  (lateralCommandType == axisCommandType.byTargetSpeed) then
                    local lateralAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.lateral)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. lateralStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + lateralAcceleration
                end

                -- Vertical Translation
                local verticalStrafeEngineTags = 'thrust analog vertical'
                local verticalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.vertical)
                if (verticalCommandType == axisCommandType.byThrottle) then
                    local verticalStrafeAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromThrottle(verticalStrafeEngineTags,axisCommandId.vertical)
                    Nav:setEngineForceCommand(verticalStrafeEngineTags, verticalStrafeAcceleration, keepCollinearity, 'airfoil', 'ground', '', tolerancePercentToSkipOtherPriorities)
                elseif  (verticalCommandType == axisCommandType.byTargetSpeed) then
                    local verticalAcceleration = Nav.axisCommandManager:composeAxisAccelerationFromTargetSpeed(axisCommandId.vertical)
                    autoNavigationEngineTags = autoNavigationEngineTags .. ' , ' .. verticalStrafeEngineTags
                    autoNavigationAcceleration = autoNavigationAcceleration + verticalAcceleration
                end

                -- Auto Navigation (Cruise Control)
                if (autoNavigationAcceleration:len() > constants.epsilon) then
                    if (brakeInput ~= 0 or autoNavigationUseBrake or math.abs(constructVelocityDir:dot(constructForward)) < 0.95)  -- if the velocity is not properly aligned with the forward
                    then
                        autoNavigationEngineTags = autoNavigationEngineTags .. ', brake'
                    end
                    Nav:setEngineForceCommand(autoNavigationEngineTags, autoNavigationAcceleration, dontKeepCollinearity, '', '', '', tolerancePercentToSkipOtherPriorities)
                end

                -- Rockets
                Nav:setBoosterCommand('rocket_engine')
        onUpdate:
            lua: |
                Nav:update()
                if mybr then brakeInput = 1 end
        onActionStart:
            args: [gear]
            lua: |
                gearExtended = not gearExtended
                if gearExtended then
                    unit.deployLandingGears()
                else
                    unit.retractLandingGears()
                end
                    gearB = true
        onActionStop:
            args: [gear]
            lua: |
                    gearB = false
        onActionStart:
            args: [light]
            lua: |
                if unit.isAnyHeadlightSwitchedOn() == 1 then
                    unit.switchOffHeadlights()
                else
                    unit.switchOnHeadlights()
                end
        onActionStart:
            args: [forward]
            lua: |
                pitchInput = pitchInput - 1
        onActionStop:
            args: [forward]
            lua: pitchInput = pitchInput + 1
        onActionStart:
            args: [backward]
            lua: |
                pitchInput = pitchInput + 1
        onActionStop:
            args: [backward]
            lua: pitchInput = pitchInput - 1
        onActionStart:
            args: [left]
            lua: |
                rollInput = rollInput - 1
        onActionStop:
            args: [left]
            lua: rollInput = rollInput + 1
        onActionStart:
            args: [right]
            lua: |
                rollInput = rollInput + 1
        onActionStop:
            args: [right]
            lua: rollInput = rollInput - 1
        onActionStart:
            args: [straferight]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, 1.0)
                    if gearB == true then
                        helper = true
                        system.setScreen(helpHTML)
                    end
        onActionStop:
            args: [straferight]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, -1.0)
                    helper = false
        onActionStart:
            args: [strafeleft]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.lateral, -1.0)
                    if gearB == true then
                        helper1 = true
                        system.setScreen('')
                    end
        onActionStop:
            args: [strafeleft]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.lateral, 1.0)
                    helper1 = false
        onActionStart:
            args: [up]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, 1.0)
                    upB = true
        onActionStop:
            args: [up]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, -1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                    upB = false
        onActionStart:
            args: [down]
            lua: |
                Nav.axisCommandManager:deactivateGroundEngineAltitudeStabilization()
                Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.vertical, -1.0)
                    downB = true
        onActionStop:
            args: [down]
            lua: |
                Nav.axisCommandManager:updateCommandFromActionStop(axisCommandId.vertical, 1.0)
                Nav.axisCommandManager:activateGroundEngineAltitudeStabilization(currentGroundAltitudeStabilization)
                    downB = false
        onActionStart:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(1.0)
        onActionLoop:
            args: [groundaltitudeup]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(1.0)
        onActionStart:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionStart(-1.0)
        onActionLoop:
            args: [groundaltitudedown]
            lua: Nav.axisCommandManager:updateTargetGroundAltitudeFromActionLoop(-1.0)
        onActionStart:
            args: [yawright]
            lua: |
                yawInput = yawInput - 1
        onActionStop:
            args: [yawright]
            lua: yawInput = yawInput + 1
        onActionStart:
            args: [yawleft]
            lua: | 
                yawInput = yawInput + 1
        onActionStop:
            args: [yawleft]
            lua: yawInput = yawInput - 1
        onActionStart:
            args: [brake]
            lua: |
                    if tz1 ~= 2 then
                        brakeInput = brakeInput + 1
                        local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                        if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                           local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                           if (math.abs(targetSpeed) > constants.epsilon) then
                              Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                           end
                        end
                        mybr=true
                        tz1=1
                     end
                    if tz1 == 2 and tz2 == 1 then tz2=0 tz1=0 mybr = false end
        onActionStop:
            args: [brake]
            lua: | 
                brakeInput = brakeInput - 1
                    if tz1==1 then tz1=0 mybr = false end
        onActionLoop:
            args: [brake]
            lua: |
                local longitudinalCommandType = Nav.axisCommandManager:getAxisCommandType(axisCommandId.longitudinal)
                if (longitudinalCommandType == axisCommandType.byTargetSpeed) then
                    local targetSpeed = Nav.axisCommandManager:getTargetSpeed(axisCommandId.longitudinal)
                    if (math.abs(targetSpeed) > constants.epsilon) then
                        Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, - utils.sign(targetSpeed))
                    end
                end
        onActionStart:
            args: [booster]
            lua: Nav:toggleBoosters()
        onActionStart:
            args: [stopengines]
            lua:                     if lalt == false then Nav.axisCommandManager:resetCommand(axisCommandId.longitudinal) end
        onActionStart:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, 5.0)
        onActionLoop:
            args: [speedup]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, 1.0)
        onActionStart:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionStart(axisCommandId.longitudinal, -5.0)
        onActionLoop:
            args: [speeddown]
            lua: Nav.axisCommandManager:updateCommandFromActionLoop(axisCommandId.longitudinal, -1.0)
        onActionStart:
            args: [antigravity]
            lua: if antigrav ~= nil then antigrav.toggle() end
        onActionStart:
            args: [option1]
            lua: |
                    if upB == true and shield.getResistancesCooldown() == 0 then
                        local resistance = shield.getResistances()
                        local res = {resMAX,0,0,0}
                        if resistance[1] ~= res[1] or
                        resistance[2] ~= res[2] or
                        resistance[3] ~= res[3] or
                        resistance[4] ~= res[4] then
                           if shield.setResistances(resMAX,0,0,0) == 1 then
                              system.print("ANTIMATTER POWER 100%")
                              actionRes(res)
                              system.playSound('shieldNewResists.mp3')
                           else
                              system.print("ERR6")
                              system.playSound('shieldResistError.mp3')
                           end
                        else
                           system.print("ERR7")
                           system.playSound('shieldResistError.mp3')
                        end
                     end
                    
                     if downB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {0,0,resMAX/2,resMAX/2}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(0,0,resMAX/2,resMAX/2) == 1 then
                             system.print("CANNON PROFILE 50/50%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
        onActionStart:
            args: [option2]
            lua: |
                    if upB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {0,resMAX,0,0}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(0,resMAX,0,0) == 1 then
                             system.print("ELECTROMAGNETIC POWER 100%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
                    
                    if downB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {resMAX/2,resMAX/2,0,0}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(resMAX/2,resMAX/2,0,0) == 1 then
                             system.print("RAILGUN PROFILE 50/50%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
        onActionStart:
            args: [option3]
            lua: |
                    if upB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {0,0,0,resMAX}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(0,0,0,resMAX) == 1 then
                             system.print("THERMIC POWER 100%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
                    
                    if downB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {0,resMAX/2,0,resMAX/2}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(0,resMAX/2,0,resMAX/2) == 1 then
                             system.print("LASER PROFILE 50/50%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
        onActionStart:
            args: [option4]
            lua: |
                    if upB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {0,0,resMAX,0}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(0,0,resMAX,0) == 1 then
                             system.print("KINETIC POWER 100%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
                    
                    if downB == true and shield.getResistancesCooldown() == 0 then
                       local resistance = shield.getResistances()
                       local res = {resMAX/4,resMAX/4,resMAX/4,resMAX/4}
                       if resistance[1] ~= res[1] or
                       resistance[2] ~= res[2] or
                       resistance[3] ~= res[3] or
                       resistance[4] ~= res[4] then
                          if shield.setResistances(resMAX/4,resMAX/4,resMAX/4,resMAX/4) == 1 then
                             system.print("UNIVERSAL PROFILE 25/25/25/25%")
                             actionRes(res)
                             system.playSound('shieldNewResists.mp3')
                          else
                             system.print("ERR6")
                             system.playSound('shieldResistError.mp3')
                          end
                       else
                          system.print("ERR7")
                          system.playSound('shieldResistError.mp3')
                       end
                    end
        onActionStart:
            args: [option5]
            lua: |
                    system.showScreen(0)
                    system.lockView(1)
        onActionStop:
            args: [option5]
            lua: |
                    system.showScreen(1)
                    system.lockView(0)
        onActionStart:
            args: [option6]
            lua: |
                    if shield.getResistancesCooldown() == 0 and not GHUD_shield_auto_calibration then
                        local stress = shield.getStressRatioRaw()
                        local resistance = shield.getResistances()
                        local res = getRes(stress, resMAX)
                    
                        if GHUD_shield_calibration_max then
                           if resistance[1] == res[1] and
                           resistance[2] == res[2] and
                           resistance[3] == res[3] and
                           resistance[4] == res[4]then
                              --system.print("Максимальный стресс не изменился")
                           else
                              if shield.setResistances(res[1],res[2],res[3],res[4]) == 1 then
                                 system.print("Shield power has been set to max stress")
                                 actionRes(res)
                                system.playSound('shieldNewResists.mp3')
                              end
                           end
                        else
                           local re1 = getResRatioBy2HighestDamage(stress)[1]
                           local re2 = getResRatioBy2HighestDamage(stress)[2]
                           local re3 = getResRatioBy2HighestDamage(stress)[3]
                           local re4 = getResRatioBy2HighestDamage(stress)[4]
                           if re1 == resistance[1] and
                           re2 == resistance[2] and
                           re3 == resistance[3] and
                           re4 == resistance[4] then
                              --system.print("2 максимальных стресса не изменились")
                           else
                              if shield.setResistances(re1,re2,re3,re4) == 1 then
                                 system.print("Shield power has been split 50/50%")
                                 local re = {re1,re2,re3,re4}
                                 actionRes(re)
                                system.playSound('shieldNewResists.mp3')
                              end
                           end
                        end
                     end
        onActionStart:
            args: [option7]
            lua: |
                    if shift==false then
                       if GHUD_shield_auto_calibration == true then
                          GHUD_shield_auto_calibration = false
                          system.print('Shield manual mode activated')
                       else
                          GHUD_shield_auto_calibration = true
                          system.print('Shield auto mode activated')
                       end
                    else
                       if GHUD_shield_calibration_max == true then
                          GHUD_shield_calibration_max = false
                          system.print('Shield 50/50 activated')
                       else
                          GHUD_shield_calibration_max = true
                          system.print('Shield max stress mode activated')
                       end
                    end
                    
                    if GHUD_shield_auto_calibration == true
                    then
                       if GHUD_shield_calibration_max then
                          shieldText = "MAX - SHIELD"
                          shieldIcon = "A"
                       else
                          shieldText = "50/50 - SHIELD"
                          shieldIcon = "A"
                       end
                    else
                       if GHUD_shield_calibration_max then
                          shieldText = "MAX - SHIELD"
                          shieldIcon = "M"
                       else
                          shieldText = "50/50 - SHIELD"
                          shieldIcon = "M"
                       end
                    end
        onActionStart:
            args: [option8]
            lua: |
                    if shield.isActive() == 0 and shield.isVenting() == 0 then
                       shield.activate()
                       system.print("SHIELD ONLINE")
                    else
                       if varcombat == 0 then
                          shield.deactivate()
                          system.print("SHIELD OFFLINE")
                       end
                    end
        onActionStart:
            args: [option9]
            lua: |
                    if shield.isVenting() == 1 then
                        shield.stopVenting()
                        system.print("Shield venting has been stopped!")
                        local shield_hp = shield.getShieldHitpoints()
                        last_shield_hp = shield_hp
                     else
                        if venttime < venttimemax and venttime ~= 0 then
                           system.print("Shield venting is already stopped!")
                        else
                           shield.startVenting()
                           local shield_hp = shield.getShieldHitpoints()
                           last_shield_hp = shield_hp
                           system.print("Shield regeneration started!")
                        end
                     end
        onActionStart:
            args: [lalt]
            lua: |
                    lalt=true
        onActionStop:
            args: [lalt]
            lua: |
                    lalt=false
        onActionStart:
            args: [lshift]
            lua: |
                    shift=true
                    if tz1 ~= 2 then tz2=1 end
                    if tz1 == 1 and tz2 == 1 then tz1=2 mybr = true end
        onActionStop:
            args: [lshift]
            lua: |
                    shift=false
        onInputText(text):
            lua: |
                if string.sub((text),1,3) == 'tag' then
                   setTag(text)
                   transponder.deactivate()
                   unit.setTimer('tr',2)
                end
                
                if text=="helper" then
                   if bhelper == false then
                      bhelper = true
                      system.showHelper(1)
                   else
                      bhelper = false
                      system.showHelper(0)
                   end
                end
                
                if text == "am" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {resMAX,0,0,0}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(resMAX,0,0,0) == 1 then
                         system.print("ANTIMATTER POWER 100%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "em" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {0,resMAX,0,0}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(0,resMAX,0,0) == 1 then
                         system.print("ELECTROMAGNETIC POWER 100%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "th" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {0,0,0,resMAX}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(0,0,0,resMAX) == 1 then
                         system.print("THERMIC POWER 100%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "ki" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {0,0,resMAX,0}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(0,0,resMAX,0) == 1 then
                         system.print("KINETIC POWER 100%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "c" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {0,0,resMAX/2,resMAX/2}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(0,0,resMAX/2,resMAX/2) == 1 then
                         system.print("CANNON PROFILE 50/50%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "r" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {resMAX/2,resMAX/2,0,0}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(resMAX/2,resMAX/2,0,0) == 1 then
                         system.print("RAILGUN PROFILE 50/50%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "m" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {resMAX/2,0,resMAX/2,0}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(resMAX/2,0,resMAX/2,0) == 1 then
                         system.print("MISSILE PROFILE 50/50%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "u" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {resMAX/4,resMAX/4,resMAX/4,resMAX/4}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(resMAX/4,resMAX/4,resMAX/4,resMAX/4) == 1 then
                         system.print("UNIVERSAL PROFILE 25/25/25/25%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text == "l" and shield.getResistancesCooldown() == 0 then
                   local resistance = shield.getResistances()
                   local res = {0,resMAX/2,0,resMAX/2}
                   if resistance[1] ~= res[1] or
                   resistance[2] ~= res[2] or
                   resistance[3] ~= res[3] or
                   resistance[4] ~= res[4] then
                      if shield.setResistances(0,resMAX/2,0,resMAX/2) == 1 then
                         system.print("LASER PROFILE 50/50%")
                         actionRes(res)
                         system.playSound('shieldNewResists.mp3')
                      else
                         system.print("ERR6")
                         system.playSound('shieldResistError.mp3')
                      end
                   else
                      system.print("ERR7")
                      system.playSound('shieldResistError.mp3')
                   end
                end
                
                if text =="drop" then
                   local listships = construct.getDockedConstructs()
                   for i=1, #listships do
                      construct.forceUndock(listships[i])
                   end
                   system.print("All ships were successfully undocked")
                end